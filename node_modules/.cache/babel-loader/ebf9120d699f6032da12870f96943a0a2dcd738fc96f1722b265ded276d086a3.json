{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Token ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  }\n  return Promise.reject(error);\n});\nexport const tasks = {\n  getAll: (folderId = null) => {\n    const params = folderId ? {\n      folder: folderId\n    } : {};\n    return api.get('/api/tasks/', {\n      params\n    });\n  },\n  create: data => api.post('/api/tasks/', data),\n  update: (id, data) => api.put(`/api/tasks/${id}/`, data),\n  delete: id => api.delete(`/api/tasks/${id}/`),\n  toggleComplete: id => api.post(`/api/tasks/${id}/toggle_complete/`)\n};\nexport const folders = {\n  getAll: () => api.get('/api/folders/'),\n  create: name => api.post('/api/folders/', {\n    name\n  }),\n  update: (id, data) => api.put(`/api/folders/${id}/`, data),\n  delete: id => api.delete(`/api/folders/${id}/`)\n};\nexport const user = {\n  login: (username, password) => api.post('/api-token-auth/', {\n    username,\n    password\n  }).then(response => {\n    localStorage.setItem('token', response.data.token);\n    localStorage.setItem('user', JSON.stringify({\n      id: response.data.user_id,\n      username: username\n    }));\n    return response;\n  }),\n  register: (username, email, password) => api.post('/api/register/', {\n    username,\n    email,\n    password\n  }).then(response => {\n    localStorage.setItem('token', response.data.token);\n    localStorage.setItem('user', JSON.stringify({\n      id: response.data.user_id,\n      username: username\n    }));\n    return response;\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","tasks","getAll","folderId","params","folder","get","data","post","update","id","put","delete","toggleComplete","folders","name","user","login","username","password","then","setItem","JSON","stringify","user_id","register","email"],"sources":["/Users/leearthur/VScode/mmm/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true,\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Token ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const tasks = {\n  getAll: (folderId = null) => {\n    const params = folderId ? { folder: folderId } : {};\n    return api.get('/api/tasks/', { params });\n  },\n  create: (data) => api.post('/api/tasks/', data),\n  update: (id, data) => api.put(`/api/tasks/${id}/`, data),\n  delete: (id) => api.delete(`/api/tasks/${id}/`),\n  toggleComplete: (id) => api.post(`/api/tasks/${id}/toggle_complete/`),\n};\n\nexport const folders = {\n  getAll: () => api.get('/api/folders/'),\n  create: (name) => api.post('/api/folders/', { name }),\n  update: (id, data) => api.put(`/api/folders/${id}/`, data),\n  delete: (id) => api.delete(`/api/folders/${id}/`),\n};\n\nexport const user = {\n  login: (username, password) => \n    api.post('/api-token-auth/', { username, password })\n      .then(response => {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify({ \n          id: response.data.user_id, \n          username: username \n        }));\n        return response;\n      }),\n  register: (username, email, password) => \n    api.post('/api/register/', { username, email, password })\n      .then(response => {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify({ \n          id: response.data.user_id, \n          username: username \n        }));\n        return response;\n      }),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}